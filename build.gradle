plugins {
    // project plugins
    id 'java-gradle-plugin'
    id 'groovy'

    // test coverage
    id 'jacoco'

    // ide plugin
    id 'idea'

    // intershop test plugin
    id 'com.intershop.gradle.test' version '2.2.0'

    // plugin for documentation
    id 'org.asciidoctor.convert' version '2.3.0'

    // publish plugin
    id 'maven-publish'

    // artifact signing - necessary on Maven Central
    id 'signing'

    // intershop version plugin
    id 'com.intershop.gradle.scmversion' version '2.7.4'

    // plugin for publishing to Gradle Portal
    id 'com.gradle.plugin-publish' version '0.20.0'
}

scm {
    version {
        initialVersion = '1.0.0'
    }
}

group 'com.intershop.gradle.versionrecommender'
description 'Gradle Version Recommendation Plugin'
version = scm.version.version

// plugins should work with JDK 1.7 aslong
// older INTERSHOP version use this version of JDK
sourceCompatibility = 1.8
targetCompatibility = 1.8

// set correct project status
if (project.version.endsWith('-SNAPSHOT')) {
    status = 'snapshot'
}

test {
    systemProperty 'intershop.host.ivy.url',       'https://repository.intershop.de:443/ivy-releases/'
    systemProperty 'intershop.host.mvn.url',       'https://repository.intershop.de:443/mvn-releases/'
    systemProperty 'intershop.host.username',      System.getenv('ISHUSERNAME') ?: System.getProperty('ISHUSERNAME')
    systemProperty 'intershop.host.userpassword',  System.getenv('ISHKEY') ?: System.getProperty('ISHKEY')

    systemProperty 'giturl',        System.getenv('GITURL') ?: System.getProperty('GITURL')
    systemProperty 'gituser',       System.getenv('GITUSER') ?: System.getProperty('GITUSER')
    systemProperty 'gitpasswd',     System.getenv('GITPASSWD') ?: System.getProperty('GITPASSWD')

    systemProperty 'svnurl',        System.getenv('SVNURL') ?: System.getProperty('SVNURL')
    systemProperty 'svnuser',       System.getenv('SVNUSER') ?: System.getProperty('SVNUSER')
    systemProperty 'svnpasswd',     System.getenv('SVNPASSWD') ?: System.getProperty('SVNPASSWD')

    // set heap size for the test JVM(s)
    minHeapSize = "64m"
    maxHeapSize = "128m"

    // set JVM arguments for the test JVM(s)
    jvmArgs '-XX:MaxPermSize=96m'

    // Gradle versions for test
    systemProperty 'intershop.gradle.versions', '2.11, 3.4.1'
}

task copyAsciiDoc {
    def outputDir = file("$buildDir/tmp/asciidoctorSrc")
    def inputFiles = fileTree(dir: rootDir, include: '**/*.asciidoc')

    inputs.files inputFiles
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()

        copy {
            from inputFiles
            into outputDir
        }
    }
}

asciidoctorj {
    noDefaultRepositories = true
}

asciidoctor {
    sourceDir "${buildDir}/tmp/asciidoctorSrc"
    sources {
        include 'README.asciidoc'
    }

    backends 'html5', 'docbook'
    options doctype : 'article',
            ruby    : 'erubis'
    attributes  'latestRevision'     : project.version,
            'toc':'left',
            'toclevels':'2',
            'source-highlighter' : 'coderay',
            'icons': 'font',
            'setanchors':'true',
            'idprefix':'asciidoc_',
            'idseparator':'-',
            'docinfo1':'true'
}

asciidoctor.dependsOn copyAsciiDoc

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true

        html.destination "${buildDir}/jacocoHtml"
    }
}

task groovydocJar(type: Jar) {
    dependsOn groovydoc
    classifier = 'javadoc'
    from groovydoc.destinationDir
}

// additional sources artifact
task sourceJar(type: Jar) {
    from sourceSets.main.allSource
}

publishing {
    publications {
        intershopMvn(MavenPublication) {
            from components.java

            artifact sourceJar {
                classifier 'sources'
            }

            artifact groovydocJar {
                classifier "javadoc"
            }

            pom.withXml {
                def root = asNode();
                root.appendNode('name', project.name)
                root.appendNode('description', project.description)
                root.appendNode('url', "https:/gitlab.intershop.de/IntershopGradlePlugins/${project.name}")

                def organisation = root.appendNode( 'organization' )
                organisation.appendNode("name", "Intershop Communications AG")
                organisation.appendNode("url", "http://intershop.com")

                def scm = root.appendNode( 'scm' )
                scm.appendNode( 'url', "https://github.com/IntershopCommunicationsAG/${project.name}")
                scm.appendNode( 'connection', "git@github.com:IntershopCommunicationsAG/${project.name}.git")
                scm.appendNode( 'developerConnection', "git@github.com:IntershopCommunicationsAG/${project.name}.git")

                def license = root.appendNode( 'licenses' ).appendNode( 'license' )
                license.appendNode( 'name', 'Apache License, Version 2.0' )
                license.appendNode( 'url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                license.appendNode( 'distribution', 'repo' )

                def developer = root.appendNode('developers').appendNode( 'developer' )
                developer.appendNode( 'id', 'm-raab' )
                developer.appendNode( 'name', 'M. Raab' )
                developer.appendNode( 'email', 'mraab@intershop.de' )

                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }
            }

            // create the signed artifacts
            project.tasks.signArchives.signatureFiles.each {
                artifact(it) {
                    def matcher = it.file =~ /-(sources|javadoc)\.(jar)\.asc$/
                    def ref_matcher = it.file =~ /\.html\.asc$/
                    def doc_matcher = it.file =~ /\.xml\.asc$/
                    if (matcher.find()) {
                        classifier = matcher.group(1)
                        extension = "jar.asc"
                    } else {
                        if(ref_matcher.find()) {
                            classifier = 'reference'
                            extension = 'html.asc'
                        }
                        else if(doc_matcher.find()) {
                            classifier = 'docbook'
                            extension = 'xml.asc'
                        } else {
                            classifier = null
                            extension = 'jar.asc'
                        }
                    }

                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = uri(version.toString().endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl)
            credentials {
                username = sonatypeUsername
                password = sonatypePassword
            }
        }
    }
}

signing {
    sign configurations.archives
}

pluginBundle {
    website = "https://github.com/IntershopCommunicationsAG/${project.name}"
    vcsUrl = "https://github.com/IntershopCommunicationsAG/${project.name}"
    description = project.description
    tags = ['intershop', 'version', 'dependencies', 'versionrecommendation']

    plugins {
        gradleVersionRecommender {
            id = 'com.intershop.gradle.versionrecommender'
            displayName = project.description
        }
    }
}

dependencies {
    compile 'org.apache.maven:maven-model-builder:3.3.9'
    compile 'commons-codec:commons-codec:1.6'
    compile 'org.apache.httpcomponents:httpclient:4.4.1'
    compile 'org.slf4j:slf4j-api:1.7.10'
    compile 'com.intershop.gradle.version:extended-version:3.1.0'
    compile 'net.sourceforge.nekohtml:nekohtml:1.9.22'
    compile 'com.trilead:trilead-ssh2:1.0.0-build220'
    runtime 'net.java.dev.jna:jna:3.2.7'

    //svn
    // replace svnkit's JNA 4.x with 3.2.7, which is used by Gradle itself
    compile('org.tmatesoft.svnkit:svnkit:1.8.14') {
        exclude group: 'net.java.dev.jna'
        exclude group: 'com.trilead', module: 'trilead-ssh2'
    }

    //jgit
    compile('org.eclipse.jgit:org.eclipse.jgit:4.5.0.201609210915-r') {
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }

    testCompile('org.spockframework:spock-core:1.0-groovy-2.4'){
        exclude group: 'org.codehaus.groovy'
    }

    testCompile 'commons-io:commons-io:2.2'
}

repositories {
    mavenCentral()
}

model {
    tasks.generatePomFileForIntershopMvnPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
    tasks.publishIntershopMvnPublicationToMavenLocal {
        dependsOn project.tasks.signArchives
    }
    tasks.publishIntershopMvnPublicationToMavenRepository {
        dependsOn project.tasks.signArchives
    }
}
