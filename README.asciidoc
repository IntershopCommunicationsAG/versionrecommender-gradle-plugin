= Version Recommender Plugin
:latestRevision: 1.0.0
:toc:

== Summary
With this plugin it is possible to maintain the version of dependencies in other sources. It allows to leave
the version number empty in your configuration. The following version recommendation providers are available:

* Ivy file
* Maven pom / bom file
* Properties file
* Static properties

Dependent on the kind of version provider it is possible to run automatic updates on request. This plugin
provides furthermore an extension for the generation of Ivy or BOM file filters.

== Usage
To use the Version Recommender plugin provided by Intershop, include the following in your build script of your *root* project:

[source,groovy]
[subs=+attributes]
.build.gradle
----
plugins {
    id 'com.intershop.gradle.versionrecommender' version '{latestRevision}'
}

versionRecommendation {
    provider {
        ivy('ivy_name', 'org.company:ivyfilter:1.0.0') {}
    }
    updateConfiguration {
        ivyPattern = '[organisation]/[module]/[revision]/[type]s/ivy-[revision].xml'

        defaultUpdateProvider = ['ivy_name']
    }
}
----

This plugin will always applied to the root project.

== Tasks
The Version Recommender plugin adds the following tasks to the project:

[cols="20%,15%,65%", width="95%", options="header"]
|===
|Task name                      |Type               |Description
|setLocal__[ProviderName]__     |setLocalVersion    |This task adds 'LOCAL' to the version of an dependency configuration
of a provider _'[ProviderName]'_. For a properties file provider all configured versions will be extended with LOCAL.
|setSnapshot__[ProviderName]__  |setSnapshotVersion |Does the same as setLocal__[ProviderName]__ but with SNAPSHOT.
|set__[ProviderName]__          |setVersion         |This sets a version from a project property to the
dependency of the provider _'[ProviderName]'_. The project property is: '__[ProviderName]__Version'.
|update__[ProviderName]__       |UpdateVersion      |An update of the version of a dependency of provider _'[ProviderName]'_
can be started with this task. The update functionality can be configured in the closure `updateConfiguration`.
|store__[ProviderName]__        |StoreUpdateVersion |Store the temporary changes to the configuration directory.
|reset__[ProviderName]__        |ResetVersion       |The temporary changes will be removed.
|update                         |Update             |An update for configured providers can be started with this task.
The configuration of these providers can be done with `'defaultUpdateProvider'`.
|store                          |StoreUpdate        |Temporary changes of configured providers will be stored in the
configuration directory with this task. The configuration of these providers can be done with `'defaultUpdateProvider'`.
|reset                         |ResetAllVersion    |This task removes all temporary changes of all providers.
|===

All tasks are part of the package `'com.intershop.gradle.versionrecommender.tasks'`

The tasks are only available for filters with an dependency configuration or for the property filter configuration if
the file is located in the project directory. Temporary version configuration will be stored in files in a working
directory, which is per default located in the build directory of the root project.
The file name of this configuration is `'._[providerType][ProviderName]_.version'`, eg. `.ivyProviderName.version`.

== Project Extension 'versionRecommendation'

This plugin adds an extension *`versionRecommendation`* to the root project. This extension contains the
plugin configuration for the version recommendation and also for the update functionality.

=== Methods
[cols="20%,15%,65%", width="95%", options="header"]
|===
|Method                         | Type                                      | Description
|*provider*(closure)            | <<provider,RecommendationProviderContainer>>| This method configures the container of all providers.
The order of items depends on the order in the build configuration
|*updateConfiguration*(closure) | <<updateConfiguration,UpdateConfiguration>> | This method configures the update configuration.
|===

=== Attributes
[cols="20%,15%,15%,50%", width="95%", options="header"]
|===
|Property                   | Type        | Default value | Description
|*forceRecommenderVersion*  | `boolean`   | `false`       | If this variable is true, the version is always taken from
the version recommendation. This will override configured versions in dependencies.
|===

==== [[provider]]Provider configuration 'provider' (`RecommendationProviderContainer`)
[cols="20%,15%,65%", width="95%", options="header"]
|===
|Method                                 | Type                                | Description
|*ivy*(String, Object, Closure)         | IvyRecommendationProvider           | Adds an Ivy based recommendation provider.
|*pom*(String, Object, Closure)         | MavenRecommendationProvider         | Adds a Pom based recommendation provider.
|*properties*(String, Object, Closure)  | PropertiesRecommendationProvider    | Adds a properties file base recommendation provider.
|*properties*(String, Closure)          | PropertiesRecommendationProvider    | Adds a property configuration with a map.
|*getVersion*(String, String)           | String                              | Returns a version from the provider list configuration or null.
|===

The first parameter is always the name of the provider. It is used for project properties and tasks.

The second parameter is the input of the provider. The following inputs are possible:

- *Dependency*
** This can be a Map, eg. `[group: 'com.company', name: 'module', version: 'version']`, or +
a String, eg. 'com.company:module:version'
** It is possible to leave the version empty, so that the provider is not used per default. With `'set[ProviderName]'`
it is possible to enable this provider with a specific version.
** The version can be adapted for this input configuration, with `'set[ProviderName]'`, `'setLocal[ProviderName]'`,
`'setSnapshot[ProviderName]'` and `'update[ProviderName]'`.
- *URL*
** Configuration for direct access via URL.
** The version for this configuration is not adaptable.
- *File*
** This is the configuration for a special file. This file should be part of the project.
** If this is specified for a properties provider, the versions inside of the file are adaptable and
selected properties can be exclude if necessary with a configuration.

===== Ivy Recommendation Provider
The Ivy recommendation provider uses an Ivy file for the creation of a map with modules and versions. All dependency
configurations are used and Ivy configurations are not considered. Of course it is possible to configure this provider
also with an URL or with a file definition, but a dependency definition should be the most common configuration for this provider.
The dependency configuration of the provider is also added to the version map of the provider.

[source,groovy]
.build.gradle
----
versionRecommendation {
    provider {
        ivy('providerName', 'org.company:ivyfilter:1.0.0') {}
        ivy('providerName', [group: 'org.company', name: 'versions', version: '1.0.0']) {
            transitive = true
            overrideTransitiveDeps = false
            versionMap = [ 'com.company:componet1':'1.0.0' ]
        }
    }
}
----

This provider can be used with additional properties.

====== Attributes
[cols="20%,15%,15%,50%", width="95%", options="header"]
|===
|Property                   | Type                  | Default value | Description
|*transitive*               | `boolean`             | `false`       | All dependencies from the Ivy file will be resolved transitive.
|*overrideTransitiveDeps*   | `boolean`             | `false`       | If a different version is found for a module in a transitive
dependency, and this version is greater than the previous version, the first version is overwritten.
|*versionMap*               | `Map<String, String>` | `[:]`         | The entries of this map will be added on the end of the
existing map. This version map can also contain patterns for the key, eg. 'com.company:*'.
|===

===== Pom Recommendation Provider
The Maven recommendation provider uses a Maven Bom file for the creation of a map with modules and versions. All dependency
configurations are used and a scope is not considered. Of course it is possible to configure this provider
also with an URL or with a file definition, but a dependency definition should be the most common configuration for this provider.
All dependencies are resolved transitive and the dependency configuration of the provider is also added to the version map of the provider.

[source,groovy]
.build.gradle
----
versionRecommendation {
    provider {
        pom('providerName', 'org.company:bomfilter:1.0.0') {}
        pom('providerName', [group: 'org.company', name: 'versions', version: '1.0.0']) {
            versionMap = [ 'com.company:componet1':'1.0.0' ]
        }
    }
}
----

This provider can be used with additional properties.

====== Attributes
[cols="20%,15%,15%,50%", width="95%", options="header"]
|===
|Property                   | Type                  | Default value | Description
dependency, and this version is greater than the previous version, the first version is overwritten.
|*versionMap*               | `Map<String, String>` | `[:]`         | The entries of this map will be added on the end of the
existing map. This version map can also contain patterns for the key, eg. 'com.company:*'.
|===

===== Properties Recommendation Provider
The properties recommendation provider uses a properties file for the creation of a map with modules and versions. The format
of this property file is special, because a colon is allowed in the keys. Furthermore the format and the order of all entries
will be preserved, if the file is changed by a task.

The input of this provier can be also an URL or dependency, but this input types are not supported by the tasks for version adaptions.

[source,groovy]
.build.gradle
----
versionRecommendation {
    provider {
        properties('providerName', rootProject.file('version.properties')) {}
        properties('providerName', rootProject.file('3rdPartsVersion.properties')) {
            transitive = true
            overrideTransitiveDeps = false
            versionMap = [ 'com.company:componet1':'1.0.0' ]
        }
    }
}
----

[source,groovy]
.build.gradle
----
versionRecommendation {
    provider {
        properties('providerName') {
            versionMap = [ 'com.company:componet1':'1.0.0' ]
        }
    }
}
----

==== [[updateConfiguration]]Update configuration 'updateConfiguration' (`UpdateConfiguration`)
[cols="20%,15%,65%", width="95%", options="header"]
|===
|Method                           | Type                                      | Description
|===

== Project Extension 'versionManagement'

This plugin adds an extension *`versionManagement`* to the root project. This extension contains methods which will
add functionality to the publication configuration.

=== Methods
[cols="20%,15%,65%", width="95%", options="header"]
|===
|Method                         | Type                     | Description
|*withSubProjects*(configure)   | List<Project> or Project | A list of sub projects or a single sub project, eg. `'subprojects'`
|*fromConfigurations*(configure)| List<String> or String   | A list or a single configuration of the project, eg. `'compile'`.
|*withDependencies*(configure)  | List<String> or String   | A list or a single string with a dependency configuration,
eg.`` 'com.company:module:version'``.
|===